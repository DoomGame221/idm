// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: idm.proto

package idm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IdmService_CreateAccount_FullMethodName       = "/idm.IdmService/CreateAccount"
	IdmService_CreateSession_FullMethodName       = "/idm.IdmService/CreateSession"
	IdmService_CreateDownloadTask_FullMethodName  = "/idm.IdmService/CreateDownloadTask"
	IdmService_GetDownloadTaskList_FullMethodName = "/idm.IdmService/GetDownloadTaskList"
	IdmService_UpdateDownloadTask_FullMethodName  = "/idm.IdmService/UpdateDownloadTask"
	IdmService_DeleteDownloadTask_FullMethodName  = "/idm.IdmService/DeleteDownloadTask"
	IdmService_GetDownloadTaskFile_FullMethodName = "/idm.IdmService/GetDownloadTaskFile"
)

// IdmServiceClient is the client API for IdmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdmServiceClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	CreateDownloadTask(ctx context.Context, in *CreateDownloadTaskRequest, opts ...grpc.CallOption) (*CreateDownloadTaskResponse, error)
	GetDownloadTaskList(ctx context.Context, in *GetDownloadTaskListRequest, opts ...grpc.CallOption) (*GetDownloadTaskListResponse, error)
	UpdateDownloadTask(ctx context.Context, in *UpdateDownloadTaskRequest, opts ...grpc.CallOption) (*UpdateDownloadTaskResponse, error)
	DeleteDownloadTask(ctx context.Context, in *DeleteDownloadTaskRequest, opts ...grpc.CallOption) (*DeleteDownloadTaskResponse, error)
	GetDownloadTaskFile(ctx context.Context, in *GetDownloadTaskFileRequest, opts ...grpc.CallOption) (IdmService_GetDownloadTaskFileClient, error)
}

type idmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdmServiceClient(cc grpc.ClientConnInterface) IdmServiceClient {
	return &idmServiceClient{cc}
}

func (c *idmServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, IdmService_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idmServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, IdmService_CreateSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idmServiceClient) CreateDownloadTask(ctx context.Context, in *CreateDownloadTaskRequest, opts ...grpc.CallOption) (*CreateDownloadTaskResponse, error) {
	out := new(CreateDownloadTaskResponse)
	err := c.cc.Invoke(ctx, IdmService_CreateDownloadTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idmServiceClient) GetDownloadTaskList(ctx context.Context, in *GetDownloadTaskListRequest, opts ...grpc.CallOption) (*GetDownloadTaskListResponse, error) {
	out := new(GetDownloadTaskListResponse)
	err := c.cc.Invoke(ctx, IdmService_GetDownloadTaskList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idmServiceClient) UpdateDownloadTask(ctx context.Context, in *UpdateDownloadTaskRequest, opts ...grpc.CallOption) (*UpdateDownloadTaskResponse, error) {
	out := new(UpdateDownloadTaskResponse)
	err := c.cc.Invoke(ctx, IdmService_UpdateDownloadTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idmServiceClient) DeleteDownloadTask(ctx context.Context, in *DeleteDownloadTaskRequest, opts ...grpc.CallOption) (*DeleteDownloadTaskResponse, error) {
	out := new(DeleteDownloadTaskResponse)
	err := c.cc.Invoke(ctx, IdmService_DeleteDownloadTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *idmServiceClient) GetDownloadTaskFile(ctx context.Context, in *GetDownloadTaskFileRequest, opts ...grpc.CallOption) (IdmService_GetDownloadTaskFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &IdmService_ServiceDesc.Streams[0], IdmService_GetDownloadTaskFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &idmServiceGetDownloadTaskFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IdmService_GetDownloadTaskFileClient interface {
	Recv() (*GetDownloadTaskFileResponse, error)
	grpc.ClientStream
}

type idmServiceGetDownloadTaskFileClient struct {
	grpc.ClientStream
}

func (x *idmServiceGetDownloadTaskFileClient) Recv() (*GetDownloadTaskFileResponse, error) {
	m := new(GetDownloadTaskFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IdmServiceServer is the server API for IdmService service.
// All implementations must embed UnimplementedIdmServiceServer
// for forward compatibility
type IdmServiceServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	CreateDownloadTask(context.Context, *CreateDownloadTaskRequest) (*CreateDownloadTaskResponse, error)
	GetDownloadTaskList(context.Context, *GetDownloadTaskListRequest) (*GetDownloadTaskListResponse, error)
	UpdateDownloadTask(context.Context, *UpdateDownloadTaskRequest) (*UpdateDownloadTaskResponse, error)
	DeleteDownloadTask(context.Context, *DeleteDownloadTaskRequest) (*DeleteDownloadTaskResponse, error)
	GetDownloadTaskFile(*GetDownloadTaskFileRequest, IdmService_GetDownloadTaskFileServer) error
	mustEmbedUnimplementedIdmServiceServer()
}

// UnimplementedIdmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIdmServiceServer struct {
}

func (UnimplementedIdmServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedIdmServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedIdmServiceServer) CreateDownloadTask(context.Context, *CreateDownloadTaskRequest) (*CreateDownloadTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDownloadTask not implemented")
}
func (UnimplementedIdmServiceServer) GetDownloadTaskList(context.Context, *GetDownloadTaskListRequest) (*GetDownloadTaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadTaskList not implemented")
}
func (UnimplementedIdmServiceServer) UpdateDownloadTask(context.Context, *UpdateDownloadTaskRequest) (*UpdateDownloadTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDownloadTask not implemented")
}
func (UnimplementedIdmServiceServer) DeleteDownloadTask(context.Context, *DeleteDownloadTaskRequest) (*DeleteDownloadTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDownloadTask not implemented")
}
func (UnimplementedIdmServiceServer) GetDownloadTaskFile(*GetDownloadTaskFileRequest, IdmService_GetDownloadTaskFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDownloadTaskFile not implemented")
}
func (UnimplementedIdmServiceServer) mustEmbedUnimplementedIdmServiceServer() {}

// UnsafeIdmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdmServiceServer will
// result in compilation errors.
type UnsafeIdmServiceServer interface {
	mustEmbedUnimplementedIdmServiceServer()
}

func RegisterIdmServiceServer(s grpc.ServiceRegistrar, srv IdmServiceServer) {
	s.RegisterService(&IdmService_ServiceDesc, srv)
}

func _IdmService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdmService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdmService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdmService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdmService_CreateDownloadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDownloadTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServiceServer).CreateDownloadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdmService_CreateDownloadTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServiceServer).CreateDownloadTask(ctx, req.(*CreateDownloadTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdmService_GetDownloadTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServiceServer).GetDownloadTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdmService_GetDownloadTaskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServiceServer).GetDownloadTaskList(ctx, req.(*GetDownloadTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdmService_UpdateDownloadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDownloadTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServiceServer).UpdateDownloadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdmService_UpdateDownloadTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServiceServer).UpdateDownloadTask(ctx, req.(*UpdateDownloadTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdmService_DeleteDownloadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDownloadTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdmServiceServer).DeleteDownloadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdmService_DeleteDownloadTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdmServiceServer).DeleteDownloadTask(ctx, req.(*DeleteDownloadTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdmService_GetDownloadTaskFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDownloadTaskFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IdmServiceServer).GetDownloadTaskFile(m, &idmServiceGetDownloadTaskFileServer{stream})
}

type IdmService_GetDownloadTaskFileServer interface {
	Send(*GetDownloadTaskFileResponse) error
	grpc.ServerStream
}

type idmServiceGetDownloadTaskFileServer struct {
	grpc.ServerStream
}

func (x *idmServiceGetDownloadTaskFileServer) Send(m *GetDownloadTaskFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

// IdmService_ServiceDesc is the grpc.ServiceDesc for IdmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "idm.IdmService",
	HandlerType: (*IdmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _IdmService_CreateAccount_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _IdmService_CreateSession_Handler,
		},
		{
			MethodName: "CreateDownloadTask",
			Handler:    _IdmService_CreateDownloadTask_Handler,
		},
		{
			MethodName: "GetDownloadTaskList",
			Handler:    _IdmService_GetDownloadTaskList_Handler,
		},
		{
			MethodName: "UpdateDownloadTask",
			Handler:    _IdmService_UpdateDownloadTask_Handler,
		},
		{
			MethodName: "DeleteDownloadTask",
			Handler:    _IdmService_DeleteDownloadTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDownloadTaskFile",
			Handler:       _IdmService_GetDownloadTaskFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "idm.proto",
}
